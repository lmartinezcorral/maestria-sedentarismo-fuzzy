
PSEUDOCÓDIGO: SISTEMA DE INFERENCIA DIFUSA MAMDANI
===================================================

ENTRADA:
    - X: matriz n×4 de features semanales normalizadas [0,1]
      (Actividad_p50, Superávit_p50, HRV_p50, DeltaCard_p50)
    - MF_params: parámetros de funciones de membresía (percentiles)
    - B: matriz 5×12 de antecedentes (binaria)
    - C_out: matriz 5×3 de consecuentes (real, con pesos)
    - τ: umbral de binarización (default=0.30)

SALIDA:
    - scores: vector n×1 de scores de sedentarismo [0,1]
    - labels: vector n×1 de etiquetas binarias {0=Bajo, 1=Alto}

ALGORITMO:

1. FUZZIFICACIÓN
   PARA cada semana i en 1..n:
       PARA cada feature j en 1..4:
           x_ij ← X[i, j]  # valor normalizado [0,1]
           
           # Calcular 3 membresías por feature
           μ_Baja[j] ← triangular(x_ij, MF_params[j]['Baja'])
           μ_Media[j] ← triangular(x_ij, MF_params[j]['Media'])
           μ_Alta[j] ← triangular(x_ij, MF_params[j]['Alta'])
       FIN PARA
       
       # Concatenar en vector μ_i ∈ [0,1]^12
       μ_i ← [μ_Baja[1], μ_Media[1], μ_Alta[1], ..., μ_Alta[4]]
   FIN PARA

2. ACTIVACIÓN DE REGLAS (Mamdani AND = mín)
   PARA cada semana i en 1..n:
       PARA cada regla r en 1..5:
           # Encontrar índices de antecedentes activos
           indices ← {j : B[r,j] = 1}
           
           # Activación = mínimo de membresías de antecedentes
           w_i[r] ← min{ μ_i[j] : j ∈ indices }
       FIN PARA
   FIN PARA

3. AGREGACIÓN (suma ponderada de consecuentes)
   PARA cada semana i en 1..n:
       # Producto matricial: w_i^T · C_out
       s_i ← [0, 0, 0]  # [Sed_Bajo, Sed_Medio, Sed_Alto]
       
       PARA cada regla r en 1..5:
           PARA cada salida k en 1..3:
               s_i[k] ← s_i[k] + w_i[r] · C_out[r, k]
           FIN PARA
       FIN PARA
       
       # s_i contiene activaciones agregadas por salida
   FIN PARA

4. DEFUZZIFICACIÓN (centroide discreto)
   PARA cada semana i en 1..n:
       SI ||s_i||_1 > 0 ENTONCES
           # Centroide con niveles [0.2, 0.5, 0.8]
           numerador ← 0.2·s_i[Bajo] + 0.5·s_i[Medio] + 0.8·s_i[Alto]
           denominador ← s_i[Bajo] + s_i[Medio] + s_i[Alto]
           score_i ← numerador / denominador
       SINO
           score_i ← 0.0  # caso degenerado (no se activa ninguna regla)
       FIN SI
   FIN PARA

5. BINARIZACIÓN
   PARA cada semana i en 1..n:
       SI score_i ≥ τ ENTONCES
           label_i ← 1  # Alto Sedentarismo
       SINO
           label_i ← 0  # Bajo Sedentarismo
       FIN SI
   FIN PARA

6. RETORNAR
   RETORNAR (scores, labels)

FIN ALGORITMO

---

COMPLEJIDAD:
    - Fuzzificación: O(n · 4 · 3) = O(12n)
    - Activación: O(n · 5 · 2_avg) = O(10n)  # 2_avg = antecedentes promedio por regla
    - Agregación: O(n · 5 · 3) = O(15n)
    - Defuzzificación: O(n)
    - Binarización: O(n)
    TOTAL: O(38n) → O(n)  # Lineal en número de semanas

---

FUNCIONES AUXILIARES:

FUNCIÓN triangular(x, params):
    # params = (a, b, c)  donde a < b < c
    a, b, c ← params
    
    SI x ≤ a O x ≥ c ENTONCES
        RETORNAR 0
    SINO SI a < x < b ENTONCES
        RETORNAR (x - a) / (b - a)
    SINO  # b ≤ x < c
        RETORNAR (c - x) / (c - b)
    FIN SI
FIN FUNCIÓN

---

EJEMPLO WORKED-OUT (ver archivo ejemplo_worked_out.csv)
